commonfields:
  id: 372214be-7a7d-4dbf-8e91-42b4b8447146
  version: 32
name: pdf2image_single
script: |
  from PIL import Image as Img
  from wand.image import Image
  import uuid
  import glob
  #import numpy as np
  import os
  import sys
  import subprocess

  def convert(filepdf,MyPDF):
      #used to generate temp file name. so we will not duplicate or replace anything
      uuid_set = str(uuid.uuid4().fields[-1])[:5]
      try:
          #now lets convert the PDF to Image
          #this is good resolution As far as I know
          with Image(filename=filepdf, resolution=200) as img:
              #keep good quality
              img.compression_quality = 80
              #save it to tmp name
              img.save(filename="%s.jpg" %uuid_set)
              """
              list_im = glob.glob("%s*.jpg" %uuid_set)
              count=0
              for i in list_im:
                  imgName = uuid_set+'-'+str(count)+'.jpg'
                  if len(list_im)==1:
                      imgName = uuid_set+'.jpg'
                  filename = demisto.uniqueFile()
                  subprocess.call(['mv', imgName, demisto.investigation()['id'] + '_' + filename])
                  demisto.results({'ContentsFormat': 'text', 'Type': entryTypes['image'], 'File': imgName.rstrip('.'), 'FileID': filename, 'Contents': ''})
                  count=count+1
              return True
              """
      except Exception, err:
          #always keep track the error until the code has been clean
          demisto.results("first")
          return False
      else:

          #We finally success to convert pdf to image.
          #but image is not join by it self when we convert pdf files to image.
          #now we need to merge all file

          pathsave = []
          try:
              #search all image in temp path. file name ends with uuid_set value
              list_im = glob.glob("%s*.jpg" % uuid_set)
              list_im.sort() #sort the file before joining it
              imgs = [Img.open(i) for i in list_im]
              #now lets Combine several images vertically with Python
              widths, heights = zip(*(i.size for i in imgs))
              new_width = max(widths)
              new_height = sum(heights)
              new_im = Img.new('RGB', (new_width, new_height))
              offset = 0
              for im in imgs:
                  x = 0
                  new_im.paste(im, (x, offset))
                  offset += im.size[1]
              pathsave = "MyPdf%s.jpg" % uuid_set
              #now save the image
              new_im.save(pathsave)
              filename = demisto.uniqueFile()
              imgName = 'MyPdf'+uuid_set+'.jpg'
              subprocess.call(['mv', imgName, demisto.investigation()['id'] + '_' + filename])
              MyPDF =MyPDF[:MyPDF.rfind('.')]+'.jpg'
              demisto.results({'ContentsFormat': 'text', 'Type': entryTypes['image'], 'File': MyPDF, 'FileID': filename, 'Contents': ''})
              #and then remove all temp image
              for i in list_im:
                  os.remove(i)
          except Exception, err:
              #demisto.results(err)
              return False
          #demisto.results('path save: ',pathsave)
          return True
  cmd_res = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryID']})
  d = cmd_res[0]
  arg = d['Contents']['path']
  result = convert(arg,(d['Contents']['name']).rstrip('.'))
  if result:
      demisto.results('Success')
  else:
      demisto.results("[!] Whoops. something wrong dude. enable err var to track it")
type: python
tags: []
enabled: true
args:
- name: entryID
scripttarget: 0
runonce: false
dockerimage: demis/wandpdim
